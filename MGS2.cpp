#pragma once
#include "MGS2.framework.h"
#include "lib/SimpleIni/SimpleIni.h"
#include <vector>
#include <thread>

namespace MGS2 {
	namespace Mem {
		char* Difficulty = (char*)0x118ADD0;
		char* CharacterCode = (char*)0x118C374;
		short* ProgressTanker = (short*)0x118D93C;
		short* ProgressPlant = (short*)0x118D912;
		char* ProgressTalesArray = (char*)0x118D982;
		unsigned int* PlayerInput = (unsigned int*)0xEDADDC;
		unsigned int* PlayerNewInput = (unsigned int*)0xEDADE0;
		int* RenderedFrames = (int*)0x118ADAC;
		int* GameTimeFrames = (int*)0x118AEF8;
		int* AreaTimeFrames = (int*)0x118AEA4;
		char* AreaCode = (char*)0x118ADEC;
		char* SaveGameBasePath = (char*)0xA20AA0;
		uintptr_t* MainGameStats = (uintptr_t*)0xA01F34;
		uintptr_t* MainGameData = (uintptr_t*)0xA01F3C;
		uintptr_t* MainContinueData = (uintptr_t*)0xA01F40;
		uintptr_t* PositionData = (uintptr_t*)0xF609D0;
		unsigned int* Random = (unsigned int*)0x9FCD98;
		int* VRMissionID = (int*)0xF60C1C;

		short* EquippedWeapon = (short*)0x118AEC4;
		short* EquippedItem = (short*)0x118AEC6;
		short* ReserveWeapon = (short*)0x118AED6;
		short* ReserveItem = (short*)0x118AED8;
		uintptr_t* WeaponData = (uintptr_t*)0xA53E08;
		uintptr_t* ItemData = (uintptr_t*)0xA53E10;
		size_t WeaponMaxOffset = 0x48; //0x24;
		size_t ItemMaxOffset = 0x60; //0x30;
		size_t WeaponItemContinueOffset = 0x1596;

		void* CurrentData0 = (void*)0xA01F34;
		void* ContinueData0 = (void*)0xA01F38;
		void* CurrentData1 = (void*)0xA01F3C;
		void* ContinueData1 = (void*)0xA01F40;

		tFUN_Int_Int const GclGetMappedFunction = (tFUN_Int_Int)0x889FF0;
		tFUN_Void_CC const GclWriteDebug = (tFUN_Void_CC)0x6FA180;
		tFUN_Int_Byte const GclParamInit = (tFUN_Int_Byte)0x8DEE10;
		tFUN_Int_Void const GclParamReadNext = (tFUN_Int_Void)0x8DF040;
		tFUN_Int_IntInt const VoxPlayOffset = (tFUN_Int_IntInt)0x8854C0;



		MGS2::Stage Stage() {
			char firstChar = *(char*)Mem::AreaCode;
			if ((firstChar == 'd') || (firstChar == 'w')) {
				short* data = (short*)*(uintptr_t*)Mem::CurrentData0;
				return (data[3] & 0x1000) ? Stage::Tanker : Stage::Plant;
			}
			//if (*Mem::VRMissionID != -1) return Stage::Missions; // todo do this properly
			// boss survival?
			if (Mem::ProgressTalesArray[0] > 0) return (MGS2::Stage)(Stage::TalesA + Mem::ProgressTalesArray[0] - 1);
			return Stage::None;
		}

		short Progress() {
			char talesIndex;

			MGS2::Stage stage = Mem::Stage();
			switch (stage) {
				case Stage::Tanker:
					return *Mem::ProgressTanker;
				case Stage::Plant:
					return *Mem::ProgressPlant;
				case Stage::Missions:
					return *Mem::VRMissionID;
				case Stage::BossSurvival:
					return 0;
				case Stage::TalesA:
				case Stage::TalesB:
				case Stage::TalesC:
				case Stage::TalesD:
				case Stage::TalesE:
					talesIndex = Mem::ProgressTalesArray[0];
					return Mem::ProgressTalesArray[talesIndex];
				default:
					return -1;
			}
		}
	}

	namespace Vox {
		const int Block[]{
			0x0, 0x13, 0x2a, 0x3d, 0x54, 0x71, 0x90, 0xaf, 0xd0, 0xe7, 0xfe, 0x121, 0x140, 0x15b, 0x17a, 0x1a3, 0x1cc, 0x1f3, 0x20e, 0x227, 0x24e, 0x269, 0x28a, 0x2ab, 0x2c6, 0x2dd, 0x2fe, 0x327, 0x34c, 0x365, 0x38a, 0x3b9, 0x3ec, 0x40f, 0x436, 0x455, 0x482, 0x4ad, 0x4e2, 0x507, 0x534, 0x555, 0x58a, 0x5bf, 0x5e6, 0x629, 0x646, 0x669, 0x694, 0x6bd, 0x6ea, 0x70b, 0x726, 0x749, 0x77a, 0x7a5, 0x7d6, 0x809, 0x83e, 0x879, 0x8b2, 0x8fd, 0x924, 0x94d, 0x98e, 0x9a1, 0x9b8, 0x9cd, 0x9ee, 0xa07, 0xa28, 0xa41, 0xa54, 0xa6f, 0xa8a, 0xaa7, 0xac2, 0xae7, 0xb06, 0xb27, 0xb46, 0xb5d, 0xb76, 0xb95, 0xbb2, 0xbcb, 0xbe8, 0xbff, 0xc30, 0xc51, 0xc6e, 0xc89, 0xcb0, 0xcd5, 0xcf2, 0xd0f, 0xd32, 0xd53, 0xd78, 0xda5, 0xdd0, 0xe09, 0xe30, 0xe57, 0xe94, 0xead, 0xeda, 0xf0f, 0xf3c, 0xf61, 0xf98, 0xfcb, 0xfee, 0x1019, 0x1040, 0x106f, 0x10a0, 0x10d7, 0x1104, 0x1133, 0x1158, 0x1179, 0x11ac, 0x11cd, 0x11ea, 0x121f, 0x1240, 0x1267, 0x128e, 0x12b5, 0x12d8, 0x12fd, 0x1324, 0x1341, 0x1362, 0x1397, 0x13c4, 0x13d7, 0x13ee, 0x1403, 0x1424, 0x143d, 0x145e, 0x1477, 0x148a, 0x14a5, 0x14c0, 0x14dd, 0x14f8, 0x151d, 0x153c, 0x155d, 0x157c, 0x1593, 0x15ac, 0x15cb, 0x15e8, 0x1601, 0x161e, 0x1635, 0x1666, 0x1687, 0x16a4, 0x16bf, 0x16e6, 0x170b, 0x1728, 0x1745, 0x1768, 0x1789, 0x17ae, 0x17db, 0x1806, 0x183f, 0x1866, 0x188d, 0x18ca, 0x18e3, 0x1910, 0x1945, 0x1972, 0x1997, 0x19ce, 0x1a01, 0x1a24, 0x1a4f, 0x1a76, 0x1aa5, 0x1ad6, 0x1b0d, 0x1b3a, 0x1b69, 0x1b8e, 0x1baf, 0x1be2, 0x1c03, 0x1c20, 0x1c55, 0x1c76, 0x1c9d, 0x1cc4, 0x1ceb, 0x1d0e, 0x1d33, 0x1d5a, 0x1d77, 0x1d98, 0x1dcd, 0x1dfa, 0x1e0c, 0x1e1f, 0x1e35, 0x1e50, 0x1e70, 0x1e92, 0x1eaa, 0x1ec4, 0x1f39, 0x1f9d, 0x2017, 0x2093, 0x2102, 0x2167, 0x21d1, 0x226e, 0x2289, 0x22a0, 0x22b2, 0x2325, 0x2395, 0x2424, 0x2494, 0x2501, 0x258c, 0x25a9, 0x25be, 0x25e1, 0x2608, 0x2629, 0x264b, 0x2663, 0x2683, 0x26a0, 0x26c6, 0x26fb, 0x271d, 0x273c, 0x275c, 0x2781, 0x27a1, 0x27c4, 0x27df, 0x27f0, 0x2823, 0x2839, 0x284a, 0x2868, 0x2887, 0x2895, 0x28ab, 0x28c8, 0x28dc, 0x28f0, 0x2907, 0x291d, 0x2948, 0x2977, 0x2993, 0x29c3, 0x29de, 0x2a0b, 0x2a22, 0x2a32, 0x2a43, 0x2a56, 0x2a67, 0x2a78, 0x2a94, 0x2ab8, 0x2ac6, 0x2add, 0x2aea, 0x2b07, 0x2b1c, 0x2b33, 0x2b47, 0x2b5d, 0x2b6f, 0x2b81, 0x2b95, 0x2bab, 0x2bcb, 0x2bf5, 0x2c2b, 0x2c56, 0x2c83, 0x2ca9, 0x2ce1, 0x2d09, 0x2d2c, 0x2d83, 0x2db3, 0x2de0, 0x2e07, 0x2e5d, 0x2e9c, 0x2ebd, 0x2edb, 0x2ee9, 0x2f14, 0x2f30, 0x2f44, 0x2f58, 0x2f71, 0x2f83, 0x2f92, 0x2fa8, 0x2fbe, 0x2fd4, 0x2fe5, 0x2ff4, 0x3008, 0x3028, 0x303c, 0x304e, 0x3062, 0x3078, 0x3088, 0x309a, 0x30ad, 0x30bf, 0x30ce, 0x30dd, 0x30fb, 0x3113, 0x3132, 0x314b, 0x3166, 0x317b, 0x318b, 0x31a1, 0x31ba, 0x31ce, 0x31e4, 0x31f8, 0x320e, 0x3223, 0x3236, 0x3247, 0x3276, 0x329c, 0x32bc, 0x32de, 0x32fc, 0x3318, 0x3340, 0x3364, 0x3385, 0x33ac, 0x33c8, 0x33e8, 0x3406, 0x3428, 0x3443, 0x345d, 0x346d, 0x3496, 0x34a4, 0x34c4, 0x34d8, 0x34e8, 0x34fb, 0x3509, 0x3529, 0x353c, 0x3550, 0x3562, 0x357e, 0x359b, 0x35b5, 0x35e4, 0x35fe, 0x3615, 0x3625, 0x363b, 0x364b, 0x365c, 0x366d, 0x3682, 0x3693, 0x36a3, 0x36b9, 0x36d4, 0x36e1, 0x36f8, 0x370e, 0x3723, 0x373d, 0x3756, 0x3770, 0x378a, 0x379e, 0x37b4, 0x37c6, 0x37d8, 0x37fe, 0x3831, 0x385e, 0x388c, 0x38b5, 0x38cd, 0x38f4, 0x3925, 0x3947, 0x396f, 0x399d, 0x39c2, 0x39f1, 0x3a12, 0x3a4c, 0x3a77, 0x3a88, 0x3ab7, 0x3ad5, 0x3aee, 0x3b01, 0x3b19, 0x3b3e, 0x3b4d, 0x3b6d, 0x3b81, 0x3b97, 0x3bab, 0x3bbd, 0x3bcf, 0x3be7, 0x3c20, 0x3c41, 0x3c52, 0x3c6b, 0x3c80, 0x3c9c, 0x3cad, 0x3cc2, 0x3cd5, 0x3ce8, 0x3cfa, 0x3d12, 0x3d2a, 0x3d4b, 0x3d61, 0x3d7a, 0x3d8f, 0x3da7, 0x3dbf, 0x3dd6, 0x3ded, 0x3e05, 0x3e21, 0x3e40, 0x3e53, 0x3e65, 0x3e98, 0x3eb7, 0x3edc, 0x3ef8, 0x3f15, 0x3f2c, 0x3f48, 0x3f64, 0x3f89, 0x3fb9, 0x3fda, 0x3ff9, 0x4016, 0x4036, 0x4053, 0x4072, 0x408d, 0x409c, 0x40c5, 0x40da, 0x40f1, 0x410b, 0x4128, 0x4139, 0x4149, 0x415b, 0x416c, 0x418e, 0x41aa, 0x41c5, 0x41ec, 0x4201, 0x4226, 0x4239, 0x4247, 0x4255, 0x4266, 0x4275, 0x4284, 0x429a, 0x42b5, 0x42c2, 0x42d4, 0x42df, 0x42f3, 0x4304, 0x4314, 0x4324, 0x4335, 0x4344, 0x4353, 0x4363, 0x4373, 0x439c, 0x43bb, 0x43e7, 0x440c, 0x4431, 0x444f, 0x447f, 0x449f, 0x44c0, 0x4502, 0x4529, 0x4552, 0x4573, 0x45b5, 0x45e9, 0x460a, 0x4625, 0x4632, 0x4659, 0x4673, 0x4687, 0x469b, 0x46b3, 0x46c7, 0x46dc, 0x46eb, 0x46fb, 0x470e, 0x4730, 0x4742, 0x4755, 0x4767, 0x477b, 0x478a, 0x479c, 0x47ac, 0x47ba, 0x47c8, 0x47d7, 0x47f0, 0x4803, 0x481b, 0x4830, 0x484d, 0x4861, 0x486f, 0x4882, 0x4896, 0x48a9, 0x48bb, 0x48cd, 0x48de, 0x48f1, 0x4901, 0x4911, 0x4936, 0x4959, 0x4977, 0x4996, 0x49b5, 0x49d1, 0x49f7, 0x4a18, 0x4a37, 0x4a5d, 0x4a7a, 0x4a9b, 0x4ab4, 0x4ad5, 0x4aee, 0x4b05, 0x4b14, 0x4b38, 0x4b49, 0x4b64, 0x4b7f, 0x4b8d, 0x4b9d, 0x4bae, 0x4bbe, 0x4bd9, 0x4bf6, 0x4c0e, 0x4c28, 0x4c41, 0x4c50, 0x4c63, 0x4c73, 0x4c83, 0x4c92, 0x4ca8, 0x4cb8, 0x4cca, 0x4cdc, 0x4cf2, 0x4cff, 0x4d10, 0x4d24, 0x4d38, 0x4d4f, 0x4d65, 0x4d7c, 0x4d96, 0x4daa, 0x4dbf, 0x4dd0, 0x4de0, 0x4e05, 0x4e2e, 0x4e55, 0x4e7a, 0x4e9f, 0x4eb4, 0x4ed5, 0x4eff, 0x4f1c, 0x4f3b, 0x4f63, 0x4f85, 0x4faf, 0x4fce, 0x5001, 0x5027, 0x5035, 0x5059, 0x5071, 0x5086, 0x50a1, 0x50b7, 0x50d3, 0x50e3, 0x50f4, 0x5103, 0x5113, 0x5127, 0x513d, 0x514d, 0x5163, 0x5175, 0x5188, 0x5197, 0x51a7, 0x51ba, 0x51cb, 0x51dd, 0x51f1, 0x5206, 0x521e, 0x5232, 0x5245, 0x5258, 0x526c, 0x527e, 0x528f, 0x52a1, 0x52b3, 0x52cd, 0x52e7, 0x52f6, 0x5306, 0x532b, 0x5350, 0x5374, 0x539b, 0x53b7, 0x53dc, 0x5413, 0x5454, 0x547c, 0x54b6, 0x54d3, 0x5525, 0x5542, 0x5558, 0x5576, 0x5587, 0x559d, 0x55b2, 0x55d1, 0x55f1, 0x5620, 0x563e, 0x565e, 0x5687, 0x56ae, 0x56ce, 0x56f7, 0x5724, 0x5745, 0x5765, 0x5785, 0x57aa, 0x57cb, 0x57f2, 0x581a, 0x5839, 0x5860, 0x5887, 0x58b1, 0x58d8, 0x58f3, 0x5915, 0x5932, 0x5951, 0x596b, 0x598a, 0x59b8, 0x59ef, 0x5a14, 0x5a4c, 0x5a69, 0x5a83, 0x5a99, 0x5ab2, 0x5ac5, 0x5ad7, 0x5aec, 0x5b09, 0x5b5e, 0x5b96, 0x5bd9, 0x5c1a, 0x5c45, 0x5c75, 0x5cb3, 0x5ce7, 0x5d30, 0x5d6d, 0x5db1, 0x5e0c, 0x5e65, 0x5e95, 0x5ecc, 0x5ef6, 0x5f38, 0x5f74, 0x5fbc, 0x5ff6, 0x604a, 0x609b, 0x60f6, 0x613c, 0x618b, 0x61ca, 0x6210, 0x6251, 0x629c, 0x62d8, 0x631f, 0x6361, 0x639e, 0x63e4, 0x6436, 0x646e, 0x64a2, 0x64e4, 0x652b, 0x6561, 0x65b1, 0x65e4, 0x661b, 0x6654, 0x667d, 0x66ad, 0x66e2, 0x6711, 0x6749, 0x6785, 0x67d0, 0x6818, 0x6860, 0x68a2, 0x68e1, 0x6923, 0x694f, 0x698a, 0x69d0, 0x6a28, 0x6a65, 0x6ab0, 0x6b07, 0x6b72, 0x6bc3, 0x6c16, 0x6c54, 0x6c9f, 0x6ce8, 0x6d2c, 0x6d64, 0x6da5, 0x6dd8, 0x6e11, 0x6e53, 0x6e98, 0x6ed6, 0x6f23, 0x6f62, 0x6fa2, 0x6fde, 0x7025, 0x7062, 0x7092, 0x70c4, 0x70f5, 0x7123, 0x715b, 0x719d, 0x71cf, 0x71fe, 0x72a7, 0x7350, 0x73f9, 0x74a2, 0x754b, 0x75f4, 0x769d, 0x76e6, 0x773c, 0x77b5, 0x7800, 0x7855, 0x78be, 0x7912, 0x7961, 0x79b9, 0x7a0f, 0x7a73, 0x7acb, 0x7b2e, 0x7b8b, 0x7bd4, 0x7c2a, 0x7c3f, 0x7c67, 0x7ccc, 0x7d1d, 0x7d74, 0x7dca, 0x7e15, 0x7e5f, 0x7eae, 0x7f12, 0x7f64, 0x7fc5, 0x8014, 0x805e, 0x808c, 0x80bf, 0x80f3, 0x8117, 0x8133, 0x818d, 0x81e2, 0x8248, 0x82a3, 0x82e9, 0x8348, 0x83a2, 0x8404, 0x845c, 0x84bb, 0x8501, 0x8553, 0x8585, 0x85d8, 0x8643, 0x8694, 0x86f6, 0x8757, 0x87ab, 0x8808, 0x8865, 0x88c4, 0x8927, 0x897f, 0x89b1, 0x8a08, 0x8a62, 0x8ab6, 0x8b15, 0x8b68, 0x8bbb, 0x8c1f, 0x8c78, 0x8cde, 0x8d3f, 0x8d97, 0x8dc5, 0x8e1d, 0x8e7e, 0x8eca, 0x8f2c, 0x8f77, 0x8fcf, 0x9036, 0x9092, 0x90fb, 0x915d, 0x91b6, 0x91e4, 0x923a, 0x9294, 0x92f6, 0x9348, 0x938a, 0x93ef, 0x9452, 0x94a2, 0x9508, 0x955d, 0x95b5, 0x95e7, 0x961d, 0x9659, 0x9696, 0x96d3, 0x96f6, 0x9745, 0x9791, 0x97ef, 0x9837, 0x987b, 0x98b5, 0x9905, 0x9944, 0x997e, 0x99c8, 0x9a01, 0x9a41, 0x9a67, 0x9aa8, 0x9ade, 0x9b1d, 0x9b77, 0x9bb5, 0x9c10, 0x9c3e, 0x9c76, 0x9cbb, 0x9d02, 0x9d24, 0x9d67, 0x9da1, 0x9de7, 0x9e1b, 0x9e59, 0x9e8e, 0x9ed3, 0x9f07, 0x9f41, 0x9f7b, 0x9f9c, 0x9fe8, 0xa027, 0xa06b, 0xa0bf, 0xa0fd, 0xa13e, 0xa183, 0xa1c8, 0xa1f0, 0xa23a, 0xa29a, 0xa2e1, 0xa342, 0xa390, 0xa3fa, 0xa43b, 0xa476, 0xa4b0, 0xa4ed, 0xa52f, 0xa562, 0xa59b, 0xa5cd, 0xa616, 0xa679, 0xa6bf, 0xa71f, 0xa76b, 0xa7c3, 0xa806, 0xa841, 0xa87e, 0xa8bb, 0xa901, 0xa941, 0xa978, 0xa9b2, 0xa9cf, 0xaa17, 0xaa76, 0xaabc, 0xab1e, 0xab74, 0xabb0, 0xabfc, 0xac3c, 0xac83, 0xacd9, 0xad13, 0xad47, 0xad81, 0xadbf, 0xadde, 0xae24, 0xae5e, 0xaea8, 0xaef2, 0xaf3e, 0xaf7f, 0xafc7, 0xb00d, 0xb054, 0xb09c, 0xb0e5, 0xb120, 0xb187, 0xb1ce, 0xb20d, 0xb24e, 0xb2bb, 0xb303, 0xb34a, 0xb393, 0xb3d8, 0xb414, 0xb459, 0xb49b, 0xb4d9, 0xb50a, 0xb549, 0xb583, 0xb5a5, 0xb5f5, 0xb640, 0xb68b, 0xb6c7, 0xb712, 0xb75b, 0xb7c3, 0xb80a, 0xb84c, 0xb897, 0xb8e8, 0xb93c, 0xb9b2, 0xba00, 0xba49, 0xba78, 0xbac1, 0xbb13, 0xbb5d, 0xbbaa, 0xbbf0, 0xbc34, 0xbc7b, 0xbcbb, 0xbd10, 0xbd66, 0xbdb9, 0xbe0d, 0xbe58, 0xbeaf, 0xbefb, 0xbf2c, 0xbfda, 0xc2bd, 0xc425, 0xc48a, 0xc4f8, 0xc56b, 0xc5bd, 0xc60d, 0xc67a, 0xc6bc, 0xc6f5, 0xc72f, 0xc774, 0xc7be, 0xc815, 0xc865, 0xc896, 0xc91f, 0xc972, 0xc9cc, 0xc9f8, 0xcab9, 0xcb33, 0xcb7f, 0xcd43, 0xcdca, 0xcdfe, 0xce63, 0xce8b, 0xcec2, 0xceee, 0xcf0e, 0xcf3b, 0xcf83, 0xcfad, 0xcfd5, 0xd0b0, 0xd0c1, 0xd0f3, 0xd105, 0xd139, 0xd158, 0xd176, 0xd191, 0xd1ab, 0xd1d1, 0xd736, 0xdb4d, 0xddb2, 0xde97, 0xdea9, 0xdec1, 0xdee1, 0xdef6, 0xdf1a, 0xdf31, 0xdf48, 0xdf5e, 0xe11e, 0xe13d, 0xe14f, 0xe164, 0xe183, 0xe1b8, 0xe20e, 0xe25d, 0xe293, 0xe2da, 0xe32b, 0xe379, 0xe3b6, 0xe3f2, 0xe41e, 0xe448, 0xe48f, 0xe4a6, 0xe4bf, 0xe4eb, 0xe512, 0xe534, 0xe5cd, 0xe5e0, 0xe5f5, 0xe635, 0xe65e, 0xe68e, 0xe6c1, 0xe6ff, 0xe73f, 0xeac0, 0xeafd, 0xeb30, 0xeb4b, 0xeb6b, 0xeb95, 0xebb8, 0xebe5, 0xebf8, 0xec0e, 0xec24, 0xec3a, 0xec52, 0xec69, 0xec7e, 0xec93, 0xeca5, 0xecbb, 0xecd2, 0xecee, 0xed0d, 0xed30, 0xed51, 0xed6f, 0xed8e, 0xedb8, 0xedd6, 0xedfa, 0xee25, 0xee57, 0xee70, 0xee82, 0xee96, 0xeeb2, 0xeecc, 0xeee4, 0xef02, 0xef1c, 0xef42, 0xef5d, 0xef77, 0xef8c, 0xefa9, 0xefc0, 0xefd7, 0xeff4, 0xf018, 0xf03a, 0xf069, 0xf09d, 0xf0c5, 0xf0f3, 0xf121, 0xf148, 0xf163, 0xf176, 0xf192, 0xf1ac, 0xf1cf, 0xf1e1, 0xf20c, 0xf229, 0xf249, 0xf268, 0xf286, 0xf2c4, 0xf2e4, 0xf303, 0xf33c, 0xf376, 0xf395, 0xf3b0, 0xf3d7, 0xf3f9, 0xf427, 0xf444, 0xf470, 0xf48b, 0xf4bb, 0xf4dd, 0xf4f8, 0xf512, 0xf530, 0xf551, 0xf57e, 0xf5a5, 0xf5c4, 0xf5e9, 0xf60b, 0xf61c, 0xf633, 0xf64f, 0xf65c, 0xf667, 0xf67a, 0xf68e, 0xf6a5, 0xf6c5, 0xf6e5, 0xf6ff, 0xf715, 0xf73b, 0xf758, 0xf76f, 0xf78f, 0xf7ad, 0xf7c2, 0xf7d9, 0xf7ec, 0xf7fc, 0xf80f, 0xf81b, 0xf82a, 0xf839, 0xf849, 0xf85b, 0xf878, 0xf88c, 0xf89c, 0xf8a7, 0xf8be, 0xf8d0, 0xf8e1, 0xf91a, 0xf932, 0xf94d, 0xf963, 0xf989, 0xf9d6, 0xfa0f, 0xfa83, 0x102b9, 0x1030f, 0x1033d, 0x1035f, 0x10398, 0x103c1, 0x103d7, 0x103fe, 0x10415, 0x10443, 0x10471, 0x1048c, 0x104ac, 0x1070d, 0x10ab1, 0x10ad4, 0x10afa, 0x10b17, 0x10b29, 0x10b45, 0x10b70, 0x10b97, 0x10bc5, 0x10be9, 0x10bfa, 0x10c1a, 0x10c3f, 0x10c82, 0x10cb9, 0x10ce2, 0x10cf7, 0x10d17, 0x10d3c, 0x10d6b, 0x10d87, 0x10da8, 0x10dcc, 0x10de3, 0x10df2, 0x10e0c, 0x10e23, 0x10e3f, 0x10e5c, 0x10e79, 0x10e9a, 0x10eb0, 0x10ed8, 0x10eec, 0x110a2, 0x113f3, 0x1145f, 0x1147b, 0x11497, 0x114ae, 0x114c6, 0x114de, 0x114fe, 0x1152a, 0x11548, 0x1155b, 0x1156e, 0x11583, 0x11599, 0x115b8, 0x115d3, 0x115e8, 0x1160f, 0x11647, 0x11667, 0x1167c, 0x1168c, 0x1169f, 0x116b0, 0x116c6, 0x116d7, 0x116eb, 0x11710, 0x1173f, 0x11769, 0x1177c, 0x1178d, 0x117a9, 0x117bf, 0x117d1, 0x117e8, 0x117fc, 0x11810, 0x11825, 0x11838, 0x1184b, 0x1185c, 0x11874, 0x11885, 0x1189a, 0x118b5, 0x118cb, 0x1196b, 0x1198c, 0x119b1, 0x119d1, 0x11bc2, 0x11c23, 0x11d1f, 0x11d54, 0x11d71, 0x11f4a, 0x11f8b, 0x12044, 0x120fd, 0x121b6, 0x1226f, 0x12289, 0x122b2, 0x122df, 0x12303, 0x123bc, 0x12475, 0x1252e, 0x125e7, 0x126a0, 0x12759, 0x12812, 0x128cb, 0x128e7, 0x12905, 0x12919, 0x129d2, 0x12a8b, 0x12b44, 0x12bfd, 0x12cb6, 0x12d6f, 0x12e28, 0x12ee1, 0x12f9a, 0x13053, 0x1310c, 0x131c5, 0x1327e, 0x13337, 0x133f0, 0x134a9, 0x13562, 0x1361b, 0x136d4, 0x1378d, 0x13846, 0x138ff, 0x139b8, 0x13a71, 0x13b2a, 0x13be3, 0x13c9c, 0x13d55, 0x13e0e, 0x13ec7, 0x13f80, 0x14039, 0x140f2, 0x141ab, 0x141bc, 0x141dc, 0x141ff, 0x1421a, 0x1423e, 0x1425a, 0x14267, 0x14287, 0x14295, 0x142b1, 0x142c9, 0x142e3, 0x142fa, 0x14310, 0x1432d, 0x1434d, 0x14372, 0x14399, 0x143b6, 0x143cc, 0x143e8, 0x14403, 0x1441f, 0x1443d, 0x14452, 0x1447a, 0x14493, 0x144a9, 0x144cb, 0x144e4, 0x144f4, 0x14508, 0x14572, 0x14641, 0x146fa, 0x14707, 0x14721, 0x14750, 0x14784, 0x147c5, 0x147e4, 0x147fe, 0x14925, 0x149d0, 0x14a9f, 0x14b6e, 0x14c01, 0x14c94, 0x14d27, 0x14dba, 0x14e4d, 0x14ee0, 0x14f73, 0x15006, 0x1509d, 0x15134, 0x151cb, 0x15262, 0x1531b, 0x153d4, 0x1548d, 0x15546, 0x155ff, 0x156b8, 0x15771, 0x1582a, 0x158bf, 0x15958, 0x15a25, 0x15af4, 0x15d11, 0x15f9e, 0x161f1, 0x1656d, 0x16a93, 0x16e85, 0x16e98, 0x16ea9, 0x16ebf, 0x16ed5, 0x16ef1, 0x16f1c, 0x16f29, 0x16f3a, 0x16f4f, 0x16f64, 0x16f74, 0x16f86, 0x16f9a, 0x16fb1, 0x16fc7, 0x16fd9, 0x16fec, 0x1780d, 0x1802e, 0x18853, 0x189b2, 0x189d4, 0x189ed, 0x18a0f, 0x18a43, 0x18a81, 0x18aab, 0x18ac5, 0x18aea, 0x18afd, 0x18b0e, 0x18b28, 0x18b35, 0x18b47, 0x18b67, 0x18b82, 0x18bb8, 0x18bd9, 0x18bf4, 0x18c15, 0x18c2d, 0x18c47, 0x18c5b, 0x18c74, 0x18c8c, 0x18cad, 0x18cd9, 0x18cf7, 0x18d13, 0x18d2c, 0x18d49, 0x18d65, 0x18d7d, 0x18d89, 0x18dae, 0x18dc8, 0x18dd5, 0x18de1, 0x18df0, 0x18dfe, 0x18e1c, 0x18e48, 0x18e60, 0x18e83, 0x18e95, 0x18eb6, 0x18ec6, 0x18ed1, 0x18edc, 0x18ee9, 0x18ef4, 0x18f00, 0x18f12, 0x18f2a, 0x18f33, 0x18f3b, 0x18f4a, 0x18f5b, 0x18f69, 0x18f76, 0x18f81, 0x18f8d, 0x18f9a, 0x18fa6, 0x18fcc, 0x18fe7, 0x18ff2, 0x19004, 0x1901e, 0x1902b, 0x19038, 0x193a6, 0x19578, 0x196ce, 0x19aef, 0x19bf8, 0x19c44, 0x19c9a, 0x19d82, 0x19de1, 0x19e35, 0x19e76, 0x1a00b, 0x1a130, 0x1a19c, 0x1a1d3, 0x1a219, 0x1a298, 0x1a2f6, 0x1a3a0, 0x1a459, 0x1a531, 0x1a5f5, 0x1a675, 0x1a6aa, 0x1a70e, 0x1a77b, 0x1a7af, 0x1a812, 0x1aa6b, 0x1aac7, 0x1ab11, 0x1aba1, 0x1ac1f, 0x1ac8e, 0x1acee, 0x1ad5d, 0x1add0, 0x1ae2b, 0x1ae63, 0x1ae7d, 0x1af10, 0x1af5e, 0x1b007, 0x1b069, 0x1b1de, 0x1b307, 0x1b36f, 0x1b413, 0x1b43d, 0x1b4aa, 0x1b4fd, 0x1b577, 0x1b5ac, 0x1b626, 0x1b6a4, 0x1b741, 0x1b792, 0x1b7fc, 0x1b8c0, 0x1b8f7, 0x1ba1f, 0x1bad1, 0x1bb31, 0x1bb70, 0x1bbcc, 0x1bc1c, 0x1bc92, 0x1bd3b, 0x1bfe3, 0x1c075, 0x1c152, 0x1c2b9, 0x1c2e4, 0x1c345, 0x1c38b, 0x1c3ea, 0x1c43c, 0x1c551, 0x1c888, 0x1c8e0, 0x1c91d, 0x1c985, 0x1c9c3, 0x1caa2, 0x1cafc, 0x1cb49, 0x1cb9f, 0x1cc1e, 0x1cc81, 0x1ccef, 0x1cdaa, 0x1ce2a, 0x1cec3, 0x1cf18, 0x1cfd5, 0x1d00d, 0x1d0eb, 0x1d13b, 0x1d228, 0x1d695, 0x1d6dc, 0x1d761, 0x1d794, 0x1d7e2, 0x1d829, 0x1d8c1, 0x1d92f, 0x1dc72, 0x1dd0a, 0x1df06, 0x1df6b, 0x1dfa5, 0x1dfcd, 0x1e010, 0x1e09d, 0x1e0e3, 0x1e31e, 0x1e570, 0x1e5cc, 0x1e62f, 0x1e65e, 0x1e736, 0x1e7b3, 0x1e7fc, 0x1e86b, 0x1e8b7, 0x1e926, 0x1e963, 0x1e9ab, 0x1e9eb, 0x1ea45, 0x1ea92, 0x1eafb, 0x1eb52, 0x1ec61, 0x1ef7a, 0x1f298, 0x1f2e0, 0x1f3b3, 0x1f4fb, 0x1f557, 0x1f58d, 0x1f6c2, 0x1f70f, 0x1f7b5, 0x1f7eb, 0x1f858, 0x1f883, 0x1f8c4, 0x1f904, 0x1f945, 0x1f9cc, 0x1fa44, 0x1faa0, 0x1fb99, 0x1fbfd, 0x1fcca, 0x1fcee, 0x1fd96, 0x1ff7c, 0x2011a, 0x2017a, 0x20454, 0x20490, 0x204f0, 0x2054d, 0x20582, 0x2060d, 0x20665, 0x2069a, 0x206f2, 0x20749, 0x207b7, 0x2080a, 0x20869, 0x208d9, 0x2092e, 0x2097e, 0x209ce, 0x20a6c, 0x20a88, 0x20c65, 0x20cf0, 0x20dec, 0x20e5b, 0x20ede, 0x20fb9, 0x20fe7, 0x2108a, 0x210d7, 0x2110d, 0x21191, 0x211ee, 0x212bd, 0x2132c, 0x213d5, 0x2142d, 0x21468, 0x21539, 0x21587, 0x2164b, 0x216b3, 0x2174a, 0x217aa, 0x21860, 0x218bf, 0x21982, 0x219f1, 0x21aaf, 0x21ae9, 0x21b16, 0x21b6d, 0x21bee, 0x21c34, 0x21d0d, 0x21d69, 0x21e76, 0x21ef6, 0x22114, 0x22170, 0x222e1, 0x2233d, 0x223cb, 0x22545, 0x2261d, 0x22653, 0x226f9, 0x22761, 0x227ab, 0x227f4, 0x22838, 0x2289e, 0x22924, 0x22981, 0x22a2b, 0x22abc, 0x22b13, 0x22b6d, 0x22ba4, 0x22be6, 0x22c2e, 0x22c87, 0x22ccc, 0x22df6, 0x23135, 0x231f1, 0x23254, 0x232bc, 0x23591, 0x23803, 0x23859, 0x23927, 0x23b1c, 0x23b74, 0x23c21, 0x23d9c, 0x2400a, 0x240f7, 0x242d7, 0x243f9, 0x24498, 0x24531, 0x245a3, 0x24618, 0x2468b, 0x24744, 0x2479a, 0x248b6, 0x24de2, 0x24f2e, 0x25093, 0x2529c, 0x257be, 0x25889, 0x2591e, 0x25a61, 0x25b6a, 0x25c08, 0x25c55, 0x25cbf, 0x25dee, 0x25eac, 0x25f28, 0x25f8d, 0x25fc9, 0x26010, 0x26069, 0x26142, 0x2618b, 0x262e6, 0x26368, 0x263d8, 0x26457, 0x264f4, 0x2650b, 0x2651e, 0x26540, 0x26561, 0x2657a, 0x265b2, 0x265f7, 0x2661c, 0x26639, 0x2664c, 0x2668c, 0x266ad, 0x266ea, 0x26700, 0x26739, 0x2674f, 0x26776, 0x26788, 0x26844, 0x26895, 0x268d5, 0x2690f, 0x269c6, 0x26a23, 0x26a66, 0x26a9c, 0x26d05, 0x26ef7, 0x271bd, 0x27468, 0x276e2, 0x27830, 0x27a0c, 0x27ba9, 0x27db5, 0x27f4a, 0x28120, 0x28335, 0x28544, 0x289dd, 0x28ab8, 0x28b07, 0x28ba0, 0x28f8b, 0x2938b, 0x2965f, 0x29716, 0x2973c, 0x29797, 0x299ac, 0x29a16, 0x29a72, 0x29aa7, 0x29c95, 0x29f89, 0x29fc9, 0x2a149, 0x2a24e, 0x2a28a, 0x2a312, 0x2a347, 0x2a40e, 0x2b3b6, 0x2b5a1, 0x2b73b, 0x2b788, 0x2b971, 0x2ba2d, 0x2ba64, 0x2ba74, 0x2bb34, 0x2bebf, 0x2bf08, 0x2c066, 0x2c0d7, 0x2c520, 0x2ce18, 0x2d277, 0x2d692, 0x2d874, 0x2da39, 0x2de0c, 0x2e16b, 0x2ebd9, 0x2ec20, 0x2edae, 0x2efc5, 0x2f146, 0x2f171, 0x30aac, 0x30ec1, 0x30f15, 0x30ff5, 0x3102b, 0x310fa, 0x3114f, 0x3117a, 0x311a4, 0x311d0, 0x3142c, 0x3155f, 0x31b70, 0x31bbc, 0x31e4e, 0x323b6, 0x3257f, 0x325a1, 0x325c4, 0x325e7, 0x3260c, 0x326e5, 0x329f7, 0x3305d, 0x334e8, 0x33680, 0x33828, 0x33b9a, 0x33ebf, 0x34728, 0x34bc0, 0x34ccb, 0x35244, 0x354ed, 0x359db, 0x35fff, 0x36b3b, 0x36ca4, 0x3721e, 0x37373, 0x376a0, 0x37bb2, 0x383e9, 0x391ee, 0x3988d, 0x39eb5, 0x39fc3, 0x3a29d, 0x3bdcb, 0x3cd25, 0x3cf74, 0x3cfad, 0x3d615, 0x3d721, 0x3d811, 0x3da4c, 0x3dda6, 0x3dfda, 0x3e0f9, 0x3e2db, 0x3e40a, 0x3e637, 0x3e95a, 0x3ea43, 0x40334, 0x40708, 0x409e5, 0x40c0e, 0x40d5d, 0x40df4, 0x410e0, 0x41242, 0x4133f, 0x4151e, 0x41689, 0x416ce, 0x416ed, 0x41c7b, 0x420ca, 0x43d70, 0x44014, 0x452b2, 0x45617, 0x45a69, 0x45d08, 0x465fd, 0x46afe, 0x46c99, 0x49bf6, 0x49db7, 0x4b17b, 0x4b20e, 0x4b22e, 0x4b2b4, 0x4b30f, 0x4b388, 0x4b407, 0x4b4a6, 0x4b533, 0x4b59f, 0x4b601, 0x4b678, 0x4b6d1, 0x4b73d, 0x4b7b6, 0x4b84f, 0x4b8d1, 0x4b94d, 0x4b9de, 0x4ba75, 0x4baa8, 0x4bacd, 0x4baf9, 0x4bb62, 0x4bc1d, 0x4bc38, 0x4bc56, 0x4bc73, 0x4bc86, 0x4bca5, 0x4bcbe, 0x4bce0, 0x4bcf8, 0x4bd13, 0x4bd2a, 0x4bd46, 0x4bd68, 0x4bda3, 0x4bdde, 0x4be0a, 0x4be41, 0x4be6b, 0x4beaf, 0x4beee, 0x4bf15, 0x4bf76, 0x4bfbb, 0x4c009, 0x4c06e, 0x4c0a2, 0x4c0fd, 0x4c148, 0x4c175, 0x4c1b8, 0x4c1dc, 0x4c221, 0x4c24f, 0x4c287, 0x4c2b0, 0x4c2dc, 0x4c329, 0x4c370, 0x4c39c, 0x4c418, 0x4c456, 0x4c4d3, 0x4c51f, 0x4c5ef, 0x4c669, 0x4c72d, 0x4c7d0, 0x4c7f5, 0x4c869, 0x4c8c0, 0x4c93f, 0x4c977, 0x4c99c, 0x4c9c2, 0x4c9e1, 0x4ca06, 0x4ca2a, 0x4ca57, 0x4ca80, 0x4cacf, 0x4cb1a, 0x4cb4b, 0x4cb7a, 0x4cbb5, 0x4cbdb, 0x4cc47, 0x4cd23, 0x4cdde, 0x4ce88, 0x4cf5f, 0x4d01d, 0x4d099, 0x4d0ff, 0x4d198, 0x4d1ee, 0x4d227, 0x4d26c, 0x4d2a4, 0x4d2e0, 0x4d311, 0x4d35d, 0x4d389, 0x4d3de, 0x4d41c, 0x4d46b, 0x4d4a3, 0x4d4d5, 0x4d51e, 0x4d545, 0x4d5d8, 0x4d60b, 0x4d681, 0x4d6f2, 0x4d72b, 0x4d76f, 0x4d78d, 0x4d7cb, 0x4d80f, 0x4d854, 0x4d8aa, 0x4d98e, 0x4da99, 0x4db0b, 0x4db35, 0x4db61, 0x4dbb7, 0x4dc15, 0x4dcac, 0x4dce9, 0x4dd87, 0x4dde8, 0x4de40, 0x4dedc, 0x4df37, 0x4df57, 0x4dfa7, 0x4e023, 0x4e09f, 0x4e11c, 0x4e155, 0x4e1b4, 0x4e234, 0x4e2b4, 0x4e344, 0x4e35e, 0x4e37e, 0x4e453, 0x4e4af, 0x4e4e9, 0x4e56c, 0x4e5c2, 0x4e699, 0x4e701, 0x4e7a4, 0x4e831, 0x4e901, 0x4ea03, 0x4eaaf, 0x4eb60, 0x4ecaa, 0x4ee8d, 0x4efd5, 0x4f321, 0x4f497, 0x4f804, 0x4f88b, 0x4fa46, 0x4fc27, 0x4fecc, 0x500c0, 0x500ff, 0x501cc, 0x5026d, 0x50362, 0x503e4, 0x50442, 0x504ba, 0x505c4, 0x507d0, 0x507f2, 0x5081b, 0x50865, 0x50883, 0x508ee, 0x5092d, 0x50966, 0x509b8, 0x50af2, 0x50c85, 0x50e45, 0x50f19, 0x50f6d, 0x50f93, 0x50ffd, 0x51066, 0x510eb, 0x5111c, 0x51173, 0x511ec, 0x51264, 0x512eb, 0x51365, 0x5139f, 0x513cc, 0x5142c, 0x51473, 0x514ac, 0x51585, 0x515b2, 0x51605, 0x51730, 0x5177e, 0x517f3, 0x51877, 0x518a9, 0x518ce, 0x51903, 0x51966, 0x519cf, 0x51aa2, 0x51ba3, 0x51c9e, 0x51d2e, 0x51e44, 0x520d4, 0x5210f, 0x52197, 0x52389, 0x52412, 0x5248b, 0x52542, 0x52590, 0x525c8, 0x52621, 0x52688, 0x526fa, 0x5271f, 0x527c8, 0x5285b, 0x5289b, 0x528f2, 0x5295a, 0x529b4, 0x52a16, 0x52a53, 0x52ad8, 0x52b64, 0x52b89, 0x52c12, 0x52cbe, 0x52d54, 0x52dae, 0x52e72, 0x52eac, 0x52f2d, 0x52f58, 0x52fe7, 0x53047, 0x530ad, 0x530e0, 0x53126, 0x5316b, 0x531a4, 0x531de, 0x53227, 0x53258, 0x53339, 0x53379, 0x53481, 0x536ca, 0x53811, 0x53980, 0x53aa6, 0x53aca, 0x53c6b, 0x53e6c, 0x54030, 0x54474, 0x54544, 0x545b1, 0x547ad, 0x5487c, 0x54926, 0x5498f, 0x54d88, 0x54e09, 0x55404, 0x55496, 0x55a9a, 0x55b51, 0x5606d, 0x56400, 0x5674d, 0x569bf, 0x56ae5, 0x56b5d, 0x56be2, 0x56cd8, 0x56d40, 0x56d87, 0x56e17, 0x5716f, 0x5718b, 0x571a7, 0x571d7, 0x571ec, 0x57205, 0x57228, 0x5725b, 0x57285, 0x572b5, 0x572df, 0x57379, 0x573e7, 0x57486, 0x574de, 0x57540, 0x57563, 0x5758a, 0x57599, 0x575b9, 0x575cc, 0x575e8, 0x57605, 0x5767a, 0x576a2, 0x576d7, 0x57712, 0x57747, 0x577a8, 0x577da, 0x57800, 0x5782b, 0x57851, 0x57877, 0x57893, 0x578a6, 0x578e8, 0x5790c, 0x57960, 0x57987, 0x57a2f, 0x57a80, 0x57ab8, 0x57ae0, 0x57b1a, 0x57b3b, 0x57b78, 0x57baa, 0x57bc3, 0x57c01, 0x57c5f, 0x57c91, 0x57cab, 0x57cdc, 0x57d09, 0x57d39, 0x57d74, 0x57d99, 0x57de2, 0x57e0a, 0x57e56, 0x57e84, 0x57ea1, 0x58015, 0x58028, 0x58048, 0x58062, 0x587be, 0x58a96, 0x58ad2, 0x58b4f, 0x58ba0, 0x58bf5, 0x58c67, 0x58cb5, 0x58d01, 0x58d63, 0x58dc4, 0x58e32, 0x58edb, 0x58f3f, 0x58f87, 0x58fc0, 0x59015, 0x59046, 0x59089, 0x590dc, 0x5914c, 0x59209, 0x5925b, 0x592c9, 0x59320, 0x5939b, 0x593d1, 0x59439, 0x594a8, 0x594f8, 0x5952e, 0x595e8, 0x596e8, 0x5974a, 0x597d0, 0x59847, 0x598c1, 0x59920, 0x599e4, 0x59acc, 0x59b24, 0x59b9e, 0x59c3c, 0x59c8f, 0x59ce8, 0x59d6f, 0x59dff, 0x59e3a, 0x59e76, 0x59efe, 0x59f63, 0x5a2a5, 0x5a304, 0x5a614, 0x5a660, 0x5a8d9, 0x5a943, 0x5aa0a, 0x5aa62, 0x5aaf3, 0x5acd8, 0x5b014, 0x5b288, 0x5b30a, 0x5b341, 0x5b383, 0x5b3c6, 0x5b473, 0x5b4a6, 0x5b4fb, 0x5b53e, 0x5b57e, 0x5b5cd, 0x5b630, 0x5b68d, 0x5b6e2, 0x5b715, 0x5b784, 0x5b7bd, 0x5b7ec, 0x5b83e, 0x5b8b4, 0x5b923, 0x5b9ee, 0x5ba7f, 0x5badd, 0x5bb62, 0x5bdb2, 0x5bdfd, 0x5be5b, 0x5bef2, 0x5bf48, 0x5bfb9, 0x5c011, 0x5c061, 0x5c0b7, 0x5c12a, 0x5c1a4, 0x5c1d4, 0x5c26a, 0x5c2ae, 0x5c2e1, 0x5c353, 0x5c375, 0x5c3d5, 0x5c45e, 0x5c47b, 0x5c4e1, 0x5c582, 0x5c5a8, 0x5c5e8, 0x5c677, 0x5c6d7, 0x5c750, 0x5c77c, 0x5c7e1, 0x5c7fa, 0x5c855, 0x5c8f0, 0x5c948, 0x5c9af, 0x5ca4f, 0x5caec, 0x5cb33, 0x5cb88, 0x5cba8, 0x5cc13, 0x5cc6e, 0x5cce3, 0x5cd52, 0x5cdf6, 0x5ce6d, 0x5cf34, 0x5cf7a, 0x5d073, 0x5d0d1, 0x5d132, 0x5d1a5, 0x5d230, 0x5d276, 0x5d2db, 0x5d35b, 0x5d453, 0x5d4ac, 0x5d586, 0x5d683, 0x5d702, 0x5d751, 0x5d77f, 0x5d7be, 0x5d80d, 0x5d892, 0x5d8f5, 0x5d920, 0x5d985, 0x5da2e, 0x5da81, 0x5db47, 0x5db7d, 0x5dbae, 0x5dbf7, 0x5dc30, 0x5dc71, 0x5dcc2, 0x5dd11, 0x5dd52, 0x5dd8b, 0x5ddcf, 0x5de06, 0x5de3f, 0x5de92, 0x5df1e, 0x5dfa9, 0x5e07a, 0x5e0a0, 0x5e15b, 0x5e216, 0x5e36d, 0x5e3cf, 0x5e434, 0x5e475, 0x5e4df, 0x5e53d, 0x5e598, 0x5e5c1, 0x5e610, 0x5e642, 0x5e6aa, 0x5e6ee, 0x5e73f, 0x5e7e8, 0x5e829, 0x5e85a, 0x5e892, 0x5e8f2, 0x5e94d, 0x5e9b3, 0x5ea5d, 0x5eb44, 0x5ebe1, 0x5eca2, 0x5ed60, 0x5edcb, 0x5ee09, 0x5ee60, 0x5ee77, 0x5ef39, 0x5efb2, 0x5f016, 0x5f06f, 0x5f0c5, 0x5f17d, 0x5f1ed, 0x5f298, 0x5f311, 0x5f37e, 0x5f43e, 0x5f531, 0x5f633, 0x5f69e, 0x5f702, 0x5f7ba, 0x5f814, 0x5f8a5, 0x5f8f8, 0x5f9a0, 0x5fa0b, 0x5fa72, 0x5fabe, 0x5fb2b, 0x5fb74, 0x5fc1a, 0x5fc91, 0x5fd0b, 0x5fdb9, 0x5fe09, 0x5fe81, 0x5ff1f, 0x5ff73, 0x5ffb3, 0x5ffcc, 0x60015, 0x6007b, 0x600e6, 0x60125, 0x60166, 0x601fc, 0x602a7, 0x60337, 0x603a4, 0x603fd, 0x60458, 0x6047f, 0x60504, 0x605ce, 0x6066c, 0x606c3, 0x60749, 0x607a7, 0x60888, 0x608fb, 0x6097b, 0x60a07, 0x60ac1, 0x60b4f, 0x60bdf, 0x60c2d, 0x60c81, 0x60d1e, 0x60d6d, 0x60deb, 0x60e53, 0x60ed6, 0x60f34, 0x60f5e, 0x60fba, 0x61176, 0x611eb, 0x61249, 0x612c6, 0x61379, 0x6139e, 0x613d6, 0x6140b, 0x6144b, 0x61482, 0x614b9, 0x61503, 0x61583, 0x61609, 0x616db, 0x61780, 0x617ff, 0x61857, 0x618ad, 0x618c3, 0x618d8, 0x6195b, 0x619ae, 0x61a32, 0x61b08, 0x61b7a, 0x61bff, 0x61c7a, 0x61cde, 0x61d20, 0x61da5, 0x61e17, 0x61ed0, 0x61f35, 0x61f82, 0x62054, 0x620fc, 0x62138, 0x62185, 0x621d8, 0x6225f, 0x622ed, 0x62332, 0x623ad, 0x62430, 0x624ac, 0x624f3, 0x62547, 0x625b6, 0x62620, 0x62706, 0x6273c, 0x62818, 0x62838, 0x628a4, 0x62941, 0x629d5, 0x62a34, 0x62aab, 0x62b11, 0x62b58, 0x62b93, 0x62be4, 0x62c34, 0x62c9f, 0x62ccd, 0x62cfc, 0x62d83, 0x62dce, 0x62e06, 0x62e4e, 0x62eaa, 0x62f46, 0x6303c, 0x630ef, 0x63155, 0x63265, 0x632cf, 0x63320, 0x6337d, 0x63413, 0x634cc, 0x63607, 0x63636, 0x63694, 0x636c1, 0x63702, 0x6375b, 0x637ba, 0x637e2, 0x6387f, 0x6391c, 0x6395a, 0x639b6, 0x63a0f, 0x63a80, 0x63aee, 0x63b5d, 0x63beb, 0x63c64, 0x63cb3, 0x63cda, 0x63da7, 0x63e3d, 0x63ea2, 0x63ee4, 0x63faf, 0x64065, 0x640e4, 0x6413f, 0x641b2, 0x641f9, 0x64261, 0x642e8, 0x6438c, 0x64422, 0x644c2, 0x64549, 0x645b4, 0x6463e, 0x646d0, 0x64700, 0x6474f, 0x647ec, 0x6485f, 0x648af, 0x648fc, 0x6496a, 0x649b8, 0x64a36, 0x64aa1, 0x64b5a, 0x64b95, 0x64c3a, 0x64c7f, 0x64ce2, 0x64d8d, 0x64e04, 0x64ee9, 0x64f33, 0x64f8b, 0x64fe6, 0x65047, 0x650be, 0x6510c, 0x65193, 0x65259, 0x65307, 0x653a3, 0x65426, 0x6546b, 0x654d0, 0x65533, 0x6557d, 0x655eb, 0x65641, 0x65689, 0x65705, 0x65765, 0x657b8, 0x657ff, 0x65841, 0x658a6, 0x658f4, 0x659b0, 0x65a15, 0x65a8a, 0x65ab8, 0x65b14, 0x65bc8, 0x65c48, 0x65c80, 0x65d4b, 0x65dac, 0x65e73, 0x65f29, 0x65f85, 0x66092, 0x6623e, 0x662f7, 0x66393, 0x663db, 0x6645a, 0x664bf, 0x6650b, 0x6658a, 0x66603, 0x6667b, 0x6673f, 0x66867, 0x668db, 0x669eb, 0x66b69, 0x66bdc, 0x66c71, 0x66cea, 0x66db0, 0x66ec4, 0x66f7f, 0x6703e, 0x670b5, 0x67140, 0x6720a, 0x67275, 0x6736c, 0x675d8, 0x67637, 0x676ae, 0x67752, 0x677d5, 0x67841, 0x678e2, 0x67947, 0x67abd, 0x67b5b, 0x67ba9, 0x67bf5, 0x67c48, 0x67cea, 0x68011, 0x680f2, 0x681b7, 0x68322, 0x68407, 0x6847b, 0x684cc, 0x68514, 0x6856b, 0x68613, 0x686c3, 0x687d5, 0x68820, 0x68992, 0x689ea, 0x68a37, 0x68baf, 0x68bfc, 0x68d88, 0x68dfd, 0x68e53, 0x68ec1, 0x68ef8, 0x68fa2, 0x68fdf, 0x690a0, 0x69100, 0x69196, 0x69533, 0x6958f, 0x695b9, 0x695e1, 0x69614, 0x6963c, 0x69662, 0x6968e, 0x69ad6, 0x69b5f, 0x69bd5, 0x69c09, 0x69c78, 0x69c9f, 0x69d7e, 0x69de7, 0x69e6e, 0x69f15, 0x6a042, 0x6a0c0, 0x6a180, 0x6a1ef, 0x6a222, 0x6a262, 0x6a2b1, 0x6a2d8, 0x6a307, 0x6a375, 0x6a46a, 0x6a4bf, 0x6a50a, 0x6a592, 0x6a618, 0x6a66f, 0x6a6e6, 0x6a761, 0x6a7d9, 0x6a8a7, 0x6a918, 0x6a980, 0x6aa85, 0x6aadc, 0x6ab62, 0x6abbb, 0x6ac0d, 0x6ac89, 0x6ae7a, 0x6af2e, 0x6afca, 0x6b016, 0x6b0b0, 0x6b135, 0x6b1ac, 0x6b275, 0x6b32d, 0x6b381, 0x6b3d2, 0x6b410, 0x6b51d, 0x6b57f, 0x6b624, 0x6b6c6, 0x6b6dc, 0x6b6f1, 0x6b701, 0x6b721, 0x6b744, 0x6b751, 0x6b75f, 0x6b76c, 0x6b77c, 0x6b89d, 0x6b8e0, 0x6b933, 0x6b943, 0x6b955, 0x6b965, 0x6b97d, 0x6b9ae, 0x6b9e9, 0x6ba31, 0x6ba48, 0x6ba5f, 0x6ba79, 0x6babf, 0x6bb13, 0x6bb4b, 0x6bb7b, 0x6bbdc, 0x6bc70, 0x6bcd7, 0x6bd30, 0x6bdf0, 0x6be97, 0x6bfc1, 0x6c027, 0x6c0d5, 0x6c156, 0x6c1cf, 0x6c1fd, 0x6c24c, 0x6c2ba, 0x6c310, 0x6c343, 0x6c3a1, 0x6c407, 0x6c509, 0x6c5ef, 0x6c64d, 0x6c6f5, 0x6c74e, 0x6c90b, 0x6c9b3, 0x6ca21, 0x6caa5, 0x6cb07, 0x6cbe5, 0x6cc6d, 0x6cce7, 0x6cd2e, 0x6cd6f, 0x6ce17, 0x6cea1, 0x6cfa9, 0x6d087, 0x6d1ae, 0x6d2b2, 0x6d474, 0x6d4f1, 0x6d5af, 0x6d743, 0x6d777, 0x6d7c0, 0x6d7ea, 0x6d904, 0x6dd7a, 0x6de58, 0x6e0d2, 0x6e40a, 0x6e4c3, 0x6e5fd, 0x6e7cc, 0x6ea8c, 0x6ebe5, 0x6edf8, 0x6ef15, 0x6f1d1, 0x6f447, 0x6f73a, 0x6f91b, 0x6fa87, 0x6fbc1, 0x6fcbf, 0x6fe82, 0x70065, 0x700c8, 0x700e7, 0x70108, 0x70397, 0x70462, 0x7064d, 0x708f4, 0x7092d, 0x70b07, 0x70c06, 0x70c40, 0x70fd0, 0x71108, 0x71181, 0x711ce, 0x7120d, 0x712a6, 0x7137e, 0x714fe, 0x716f0, 0x71731, 0x71aea, 0x71cd3, 0x71f6a, 0x720c9, 0x720f8, 0x72141, 0x723e5, 0x72440, 0x72489, 0x725c1, 0x72915, 0x72fb9, 0x7320d, 0x7324e, 0x732dd, 0x73345, 0x73422, 0x73a77, 0x73cdd, 0x73dd1, 0x73ea4, 0x73f24, 0x73f85, 0x74113, 0x744dc, 0x7459f, 0x74708, 0x74821, 0x7496e, 0x74bac, 0x74db0, 0x74e0a, 0x75555, 0x75716, 0x75749, 0x75974, 0x75987, 0x759a0, 0x759b8, 0x759d1, 0x759e7, 0x759f6, 0x75a14, 0x75a35, 0x75a47, 0x75a66, 0x75a7f, 0x75a94, 0x75aa6, 0x75abb, 0x75ad5, 0x75ae6, 0x75af8, 0x75b06, 0x75b1d, 0x75b2f, 0x75b43, 0x75b5a, 0x75b70, 0x75b94, 0x75ba9, 0x75bc6, 0x75bd8, 0x75bfe, 0x75c1e, 0x75c2e, 0x75c3e, 0x75c50, 0x75ce0, 0x75d2f, 0x75d69, 0x75da4, 0x76531, 0x766a4, 0x767be, 0x767f4, 0x7684d, 0x76863, 0x768be, 0x768df, 0x76944, 0x76b3c, 0x76ba4, 0x76be7, 0x76d7c, 0x76fc1, 0x770a9, 0x77348, 0x775ce, 0x7776b, 0x778e5, 0x77979, 0x779ac, 0x779c1, 0x77ab8, 0x77c5d, 0x77dbf, 0x77f44, 0x77fbc, 0x78099, 0x7816b, 0x782a6, 0x7832a, 0x785a2, 0x7880a, 0x789f1, 0x78ad8, 0x78da2, 0x78f6e, 0x78fc6, 0x79368, 0x79494, 0x7961c, 0x7984a, 0x79b2a, 0x79b48, 0x79baa, 0x79bc3, 0x79c55, 0x79d3b, 0x79fa0, 0x7a0c9, 0x7a0fd, 0x7a15f, 0x7a226, 0x7a31f, 0x7a38c, 0x7a415, 0x7a48b, 0x7a4f2, 0x7a5b0, 0x7a611, 0x7a6c2, 0x7a74b, 0x7a794, 0x7a81d, 0x7a8c1, 0x7a9df, 0x7aaea, 0x7aba1, 0x7abc4, 0x7ac07, 0x7ac36, 0x7ac93, 0x7af35, 0x7b0a5, 0x7b153, 0x7b2bb, 0x7b4da, 0x7b56e, 0x7b61d, 0x7b72f, 0x7b813, 0x7babf, 0x7bb9f, 0x7bc0c, 0x7bd05, 0x7beeb, 0x7bfdf, 0x7c15e, 0x7c199, 0x7c30d, 0x7c5b7, 0x7c63d, 0x7c727, 0x7c90f, 0x7c94b, 0x7cb4c, 0x7cbdf, 0x7cd3d, 0x7ce3a, 0x7ced7, 0x7cfcf, 0x7d0a4, 0x7d1d5, 0x7d3a6, 0x7d5ea, 0x7d7eb, 0x7d93d, 0x7d99f, 0x7d9c6, 0x7dc20, 0x7dd28, 0x7dedb, 0x7df7d, 0x7e0a6, 0x7e28c, 0x7e388, 0x7e41d, 0x7e740, 0x7eb9d, 0x7ebe6, 0x7eda6, 0x7edf3, 0x7ee4a, 0x7f01b, 0x7f29d, 0x7f3fb, 0x7f4c3, 0x7f4eb, 0x7f615, 0x7f769, 0x7f8d3, 0x7fa0a, 0x7fa7f, 0x7fe19, 0x7ff33, 0x800fb, 0x80288, 0x808bf, 0x8098d, 0x80aa8, 0x80bb5, 0x80dbc, 0x80f93, 0x810ed, 0x812d2, 0x812ef, 0x8131a, 0x8135b, 0x813a2, 0x813d8, 0x81435, 0x81816, 0x818f3, 0x8195b, 0x81a20, 0x81aba, 0x81b33, 0x81bf7, 0x81cd4, 0x81d80, 0x81f7b, 0x821d1, 0x822b9, 0x826b8, 0x8276a, 0x82842, 0x8291f, 0x82997, 0x82a0c, 0x82a79, 0x82af5, 0x82cd6, 0x82d7c, 0x82dde, 0x83097, 0x83122, 0x831ee, 0x832d5, 0x8336c, 0x833a9, 0x8342d, 0x834aa, 0x834d8, 0x8351e, 0x836ba, 0x8386a, 0x8396c, 0x83a4a, 0x83acf, 0x83b7d, 0x83c64, 0x83ca0, 0x83cc4, 0x83f13, 0x84038, 0x840c9, 0x8419d, 0x84263, 0x84305, 0x8436b, 0x8447c, 0x844a4, 0x84547, 0x845e5, 0x84628, 0x84713, 0x84739, 0x84784, 0x84811, 0x84cf0, 0x84ddc, 0x850fa, 0x85619, 0x859bc, 0x85aae, 0x85dd0, 0x85f48, 0x86090, 0x860b8, 0x860f3, 0x86126, 0x8614c, 0x862b1, 0x862da, 0x8630e, 0x86362, 0x863b2, 0x86401, 0x86465, 0x86542, 0x86596, 0x865c0, 0x865ee, 0x8660f, 0x86664, 0x866ad, 0x8672c, 0x868aa, 0x8690e, 0x86972, 0x869fe, 0x86a91, 0x86b4e, 0x86b9a, 0x86bf5, 0x86ce2, 0x86d6b, 0x86de3, 0x86e21, 0x86e9e, 0x86ee3, 0x86f3b, 0x86fb9, 0x870a9, 0x87115, 0x8716d, 0x871e3, 0x87288, 0x8730e, 0x873b6, 0x87401, 0x87524, 0x875e7, 0x8763e, 0x8788e, 0x878ed, 0x87c22, 0x87c3f, 0x87c9f, 0x87d64, 0x87ecf, 0x87f5a, 0x87ff5, 0x880c2, 0x88146, 0x881fa, 0x88257, 0x884f9, 0x88669, 0x886ce, 0x887b0, 0x88f43, 0x892a4, 0x8930d, 0x89586, 0x895a7, 0x8965e, 0x896b1
		};

		int PlayBlock(size_t block) {
			block |= 0x20000000;
			return Mem::VoxPlayOffset(block, 0x80);
		}

		int PlayOffset(size_t offset) {
			return PlayBlock(offset / 0x800);
		}
		
		int Play(size_t index) {
			if (index >= (sizeof(Block) / sizeof(int))) return -1;
			return PlayBlock(Block[index]);
		}
	}


	unsigned int RNG(unsigned int mod) {
		unsigned int result = *Mem::Random;
		*Mem::Random = (*Mem::Random * 0x5d588b65) + 1;
		return mod ? result % mod : result;
	}

	void TextInit() {
		((void(*)(int))0x8893F0)(1);
	}

	void TextSetPosition(int x, int y, int align) {
		((void(*)(int, int, int, int))0x889440)(0, x, y, align);
	}

	void TextSetColor(int r, int g, int b) {
		((void(*)(int, int, int, int, int))0x889390)(0, r, g, b, 0x80);
	}

	void TextSetColor(int rgb) {
		unsigned char ff = 0xFF;
		TextSetColor((rgb >> 16) & ff, (rgb >> 8) & ff, rgb & ff);
	}

	void TextDraw(const char* format, const char* content) {
		((void(*)(const char*, const char*))0x889B40)(format, content);
	}

	void TextDraw(const char* format, int content) {
		((void(*)(const char*, int))0x889B40)(format, content);
	}

	void TextDraw(const char* content) {
		((void(*)(const char*))0x889B40)(content);
	}

	void TextDraw(int x, int y, int align, int rgb, const char* format, const char* content) {
		TextInit();
		TextSetColor(rgb);
		TextSetPosition(x, y, align);
		
		if (content == nullptr) {
			TextDraw(format);
		}
		else {
			TextDraw(format, content);
		}
	}

	void TextDraw(const char* content, TextConfig config) {
		TextDraw(config.PosX, config.PosY, config.Align, config.Color, content);
	}

	void TextDraw(TextConfig config) {
		TextDraw(config.PosX, config.PosY, config.Align, config.Color, config.Content);
	}

	void TextDraw(const char* format, const char* content, TextConfig config) {
		TextDraw(config.PosX, config.PosY, config.Align, config.Color, format, content);
	}

	void TextSetup(TextConfig config) {
		TextInit();
		TextSetColor(config.Color);
		TextSetPosition(config.PosX, config.PosY, config.Align);
	}

	void TriggerGameOver(unsigned int delay) {
		// Register GO and freeze game
		((tFUN_Void_Int)0x877c80)(0);

		if (delay) {
			// Set the fallback game over timer
			*(int*)0xA539E8 -= (1200 - delay);
		}
		else {
			// Trigger GO manually
			((tFUN_Void)0x877cc0)();
		}
	}

	unsigned int RemapL3(unsigned int mask) {
		if ((mask & 0x200) == 0x200) {
			mask &= 0xFFFFFDFF; // remove 0x200
			mask |= 0x60000; // add 0x60000 (L3)
		}
		return mask;
	}


	void RunDInputBg(CSimpleIniA& ini) {
		const char* category = "DInputBackground";

		if (ini.IsEmpty() || (!ini.GetBoolValue(category, "Enabled", false))) {
			return;
		}

		// change capabilities from 5 (foreground) to 9 (background)
		mem::PatchMemory((void*)0x8D06A7, "\x09");
	}

	void RunNoQuitPrompt(CSimpleIniA& ini) {
		SimplePatcher* patcher = new SimplePatcher(ini, "NoQuitPrompt");

		if (!patcher->Enabled) {
			delete(patcher);
			return;
		}

		patcher->FriendlyName = "No Quit Prompt";

		patcher->Patches = mem::PatchSet{
			// nop the messagebox call...
			mem::Patch((void*)0x878E96, "\x90\x90\x90\x90\x90"),
			// and change the conditional jz to the quit procedure to an unconditional jmp
			mem::Patch((void*)0x878E9F, "\xEB")
		};

		patcher->Run();
	}

	void RunDrebinMode(CSimpleIniA& ini) {
		const char* patch = "\x66\xB8\x0F\x27";

		SimplePatcher* patcher = new SimplePatcher(ini, "DrebinMode");

		if (!patcher->Enabled) {
			delete(patcher);
			return;
		}

		patcher->FriendlyName = "Drebin Mode";
		patcher->NewGameInfoMode = 1; // warning 

		patcher->Patches = mem::PatchSet{
			mem::Patch((void*)0x87E9CA, patch),
			mem::Patch((void*)0x87E9DA, patch),
			mem::Patch((void*)0x87E9EA, patch),
			mem::Patch((void*)0x87E9FA, patch)
		};

		patcher->Run();
	}

	void RunUnlockRadar(CSimpleIniA& ini) {
		SimplePatcher* patcher = new SimplePatcher(ini, "UnlockRadar");

		if (!patcher->Enabled) {
			delete(patcher);
			return;
		}

		patcher->FriendlyName = "Unlock Radar";
		patcher->NewGameInfoMode = 1; // warning 
		patcher->Patches = mem::PatchSet({
			mem::Patch((void*)0x841E4B, "\x66\xB8\x00\x00\x90\x90\x90", 7),
			mem::Patch((void*)0x878BEE, "\x90\x90")
			});

		patcher->Run();
	}

	
	CSimpleIniA Ini;
	void Run() {
		Ini.SetMultiKey();
		Ini.SetMultiLine();

		std::vector<const char*> iniPaths = {
			"MGS2.ini",
			"MGS2.Actions.ini", "MGS2.Affinity.ini", "MGS2.Ames.ini",
			"MGS2.Caution.ini", "MGS2.CutsceneSkip.ini",
			"MGS2.DelayedLoad.ini", "MGS2.DInputBackground.ini", "MGS2.DrebinMode.ini",
			"MGS2.EquipShortcuts.ini",
			"MGS2.FirstPerson.ini",
			"MGS2.GameOver.ini",
			"MGS2.Info.ini", "MGS2.ItemRando.ini",
			"MGS2.NewGameInfo.ini", "MGS2.NoQuitPrompt.ini",
			"MGS2.Options.ini",
			"MGS2.Performance.ini", "MGS2.PS2Controls.ini",
			"MGS2.RNG.ini",
			"MGS2.SaveLocation.ini", "MGS2.SaveMenu.ini", "MGS2.SoftReset.ini", "MGS2.Stats.ini", "MGS2.Style.ini",
			"MGS2.TextChange.ini", "MGS2.Timer.ini", "MGS2.Turbo.ini", "MGS2.TurboDisplay.ini", "MGS2.TwinSnakesInput.ini",
			"MGS2.UnlockRadar.ini",
			"MGS2.VRInfo.ini", "MGS2.VRRando.ini",
			"MGS2.Wet.ini"
		};
		for (const char* iniPath : iniPaths) {
			if (std::filesystem::exists(iniPath)) {
				Ini.LoadFile(iniPath);
			}
		}

		if (!Ini.GetBoolValue("MGS2", "Enabled", true)) {
			return;
		}

		Log::Run(Ini);
		Affinity::Run(Ini);
		Timer::Run(Ini);
		Stats::Run(Ini);
		TwinSnakesInput::Run(Ini);
		Turbo::Run(Ini);
		TurboDisplay::Run(Ini);
		Info::Run(Ini);
		RunDInputBg(Ini);
		RunNoQuitPrompt(Ini);
		PS2Controls::Run(Ini);
		TextChange::Run(Ini);
		RunUnlockRadar(Ini);
		RunDrebinMode(Ini);
		FirstPerson::Run(Ini);
		SaveLocation::Run(Ini);
		SaveMenu::Run(Ini); // after SaveLocation
		Caution::Run(Ini); // after SaveMenu
		GameOver::Run(Ini);
		SoftReset::Run(Ini);
		NewGameInfo::Run(Ini);
		Options::Run(Ini);
		Wet::Run(Ini);
		Performance::Run(Ini);
		Ames::Run(Ini);
		DelayedLoad::Run(Ini);
		VRRando::Run(Ini);
		VRInfo::Run(Ini);
		ItemRando::Run(Ini);
		ItemRando3::Run(Ini);
		Style::Run(Ini);
		EquipShortcuts::Run(Ini);
		CutsceneSkip::Run(Ini);
		Actions::Run(Ini);
	}

}
